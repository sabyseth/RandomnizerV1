//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_project/Runtime/Input/PlayerInputActoions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActoions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActoions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActoions"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""84aefcbf-08c8-4666-a436-e6e818d99432"",
            ""actions"": [
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""0b801448-5efe-4936-91ef-85863cb8df84"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7f17912a-c038-4f7e-bdfd-36082e3cbba9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""b9d6f01e-4675-4c57-bd4a-b106c941993f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""bded8eed-5da4-40e5-babf-75d74824037a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""61ff78a1-08ba-4196-8d78-9cf7fca59548"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""c396cd01-9065-4b87-8f40-2d108f25b458"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0b03323-67f2-499b-a540-c7510f61cac8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""b45c6247-bf8f-4a68-b525-d7793234f9f9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4cfe146b-963e-4ba4-a87b-c89b27ea093c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""331f755e-ae6f-4b20-b2af-118836b4bdc4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1fbd570e-ee2f-4d00-8e3e-ecd8a6ef696a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""74fbf2c6-2c1a-425f-8f49-053dafd257e0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""51811cb4-1675-4de9-a336-7556cb0fc048"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eeaf12ba-47db-4221-8674-e2aa64a7a6bd"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5cf1238-b918-48c3-9b1d-8032adbde537"",
                    ""path"": ""<Mouse>/{Back}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21103693-389b-4477-a51d-b26c2a278d44"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ecca9a3-e9fc-432d-a0a2-dda19a11c881"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
<<<<<<< HEAD
            ""name"": ""weapons switch"",
            ""id"": ""85958f32-be94-4f2f-90e4-70c60f741a9b"",
            ""actions"": [
                {
                    ""name"": ""SwitchWeapon1"",
                    ""type"": ""Button"",
                    ""id"": ""81ed7cfe-e442-487e-93df-9e6690767e1e"",
=======
            ""name"": ""UI"",
            ""id"": ""9327372c-5f38-4a60-a715-a43a6d541676"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""dd1767f4-1d9c-40f2-a129-b9260f1f3f25"",
>>>>>>> cb621d4d0e30cd7185c500a68bae285d831f5fd2
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
<<<<<<< HEAD
                    ""name"": ""SwitchWeapon2"",
                    ""type"": ""Button"",
                    ""id"": ""67e553db-1b49-402e-bbcc-c3b31fc65e23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon3"",
                    ""type"": ""Button"",
                    ""id"": ""0fd77506-be75-466e-8e6c-f54e2b81a68c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon4"",
                    ""type"": ""Button"",
                    ""id"": ""60cd1366-5288-40b6-a86e-df176677ea58"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWeapon5"",
                    ""type"": ""Button"",
                    ""id"": ""ab49116c-7dfd-4db2-ba81-c33fea069cd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
=======
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""ab51aa53-0220-45b8-b410-0cbec0f7e928"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
>>>>>>> cb621d4d0e30cd7185c500a68bae285d831f5fd2
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
<<<<<<< HEAD
                    ""id"": ""1c6d7cdd-6cd7-4573-84f0-16af5ecd6b9e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon1"",
=======
                    ""id"": ""d32673c9-de5f-474a-982b-b60280bb3f40"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
>>>>>>> cb621d4d0e30cd7185c500a68bae285d831f5fd2
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
<<<<<<< HEAD
                    ""id"": ""02f78125-8b69-4b90-8e71-63fd71d7aa79"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40be5098-4fd7-4299-85bc-24748ec9553d"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86c1435e-45dc-4820-92ef-e88f677b38c6"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3378605b-3cce-40e2-834c-a65dc68bad9c"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchWeapon5"",
=======
                    ""id"": ""0953dca7-4e8d-4c1e-94c8-7b00270f332f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
>>>>>>> cb621d4d0e30cd7185c500a68bae285d831f5fd2
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Look = m_Gameplay.FindAction("Look", throwIfNotFound: true);
        m_Gameplay_Move = m_Gameplay.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Jump = m_Gameplay.FindAction("Jump", throwIfNotFound: true);
        m_Gameplay_Crouch = m_Gameplay.FindAction("Crouch", throwIfNotFound: true);
        m_Gameplay_Sprint = m_Gameplay.FindAction("Sprint", throwIfNotFound: true);
        m_Gameplay_Fire = m_Gameplay.FindAction("Fire", throwIfNotFound: true);
<<<<<<< HEAD
        // weapons switch
        m_weaponsswitch = asset.FindActionMap("weapons switch", throwIfNotFound: true);
        m_weaponsswitch_SwitchWeapon1 = m_weaponsswitch.FindAction("SwitchWeapon1", throwIfNotFound: true);
        m_weaponsswitch_SwitchWeapon2 = m_weaponsswitch.FindAction("SwitchWeapon2", throwIfNotFound: true);
        m_weaponsswitch_SwitchWeapon3 = m_weaponsswitch.FindAction("SwitchWeapon3", throwIfNotFound: true);
        m_weaponsswitch_SwitchWeapon4 = m_weaponsswitch.FindAction("SwitchWeapon4", throwIfNotFound: true);
        m_weaponsswitch_SwitchWeapon5 = m_weaponsswitch.FindAction("SwitchWeapon5", throwIfNotFound: true);
=======
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
>>>>>>> cb621d4d0e30cd7185c500a68bae285d831f5fd2
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Look;
    private readonly InputAction m_Gameplay_Move;
    private readonly InputAction m_Gameplay_Jump;
    private readonly InputAction m_Gameplay_Crouch;
    private readonly InputAction m_Gameplay_Sprint;
    private readonly InputAction m_Gameplay_Fire;
    public struct GameplayActions
    {
        private @PlayerInputActoions m_Wrapper;
        public GameplayActions(@PlayerInputActoions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Look => m_Wrapper.m_Gameplay_Look;
        public InputAction @Move => m_Wrapper.m_Gameplay_Move;
        public InputAction @Jump => m_Wrapper.m_Gameplay_Jump;
        public InputAction @Crouch => m_Wrapper.m_Gameplay_Crouch;
        public InputAction @Sprint => m_Wrapper.m_Gameplay_Sprint;
        public InputAction @Fire => m_Wrapper.m_Gameplay_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

<<<<<<< HEAD
    // weapons switch
    private readonly InputActionMap m_weaponsswitch;
    private List<IWeaponsswitchActions> m_WeaponsswitchActionsCallbackInterfaces = new List<IWeaponsswitchActions>();
    private readonly InputAction m_weaponsswitch_SwitchWeapon1;
    private readonly InputAction m_weaponsswitch_SwitchWeapon2;
    private readonly InputAction m_weaponsswitch_SwitchWeapon3;
    private readonly InputAction m_weaponsswitch_SwitchWeapon4;
    private readonly InputAction m_weaponsswitch_SwitchWeapon5;
    public struct WeaponsswitchActions
    {
        private @PlayerInputActoions m_Wrapper;
        public WeaponsswitchActions(@PlayerInputActoions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchWeapon1 => m_Wrapper.m_weaponsswitch_SwitchWeapon1;
        public InputAction @SwitchWeapon2 => m_Wrapper.m_weaponsswitch_SwitchWeapon2;
        public InputAction @SwitchWeapon3 => m_Wrapper.m_weaponsswitch_SwitchWeapon3;
        public InputAction @SwitchWeapon4 => m_Wrapper.m_weaponsswitch_SwitchWeapon4;
        public InputAction @SwitchWeapon5 => m_Wrapper.m_weaponsswitch_SwitchWeapon5;
        public InputActionMap Get() { return m_Wrapper.m_weaponsswitch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WeaponsswitchActions set) { return set.Get(); }
        public void AddCallbacks(IWeaponsswitchActions instance)
        {
            if (instance == null || m_Wrapper.m_WeaponsswitchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WeaponsswitchActionsCallbackInterfaces.Add(instance);
            @SwitchWeapon1.started += instance.OnSwitchWeapon1;
            @SwitchWeapon1.performed += instance.OnSwitchWeapon1;
            @SwitchWeapon1.canceled += instance.OnSwitchWeapon1;
            @SwitchWeapon2.started += instance.OnSwitchWeapon2;
            @SwitchWeapon2.performed += instance.OnSwitchWeapon2;
            @SwitchWeapon2.canceled += instance.OnSwitchWeapon2;
            @SwitchWeapon3.started += instance.OnSwitchWeapon3;
            @SwitchWeapon3.performed += instance.OnSwitchWeapon3;
            @SwitchWeapon3.canceled += instance.OnSwitchWeapon3;
            @SwitchWeapon4.started += instance.OnSwitchWeapon4;
            @SwitchWeapon4.performed += instance.OnSwitchWeapon4;
            @SwitchWeapon4.canceled += instance.OnSwitchWeapon4;
            @SwitchWeapon5.started += instance.OnSwitchWeapon5;
            @SwitchWeapon5.performed += instance.OnSwitchWeapon5;
            @SwitchWeapon5.canceled += instance.OnSwitchWeapon5;
        }

        private void UnregisterCallbacks(IWeaponsswitchActions instance)
        {
            @SwitchWeapon1.started -= instance.OnSwitchWeapon1;
            @SwitchWeapon1.performed -= instance.OnSwitchWeapon1;
            @SwitchWeapon1.canceled -= instance.OnSwitchWeapon1;
            @SwitchWeapon2.started -= instance.OnSwitchWeapon2;
            @SwitchWeapon2.performed -= instance.OnSwitchWeapon2;
            @SwitchWeapon2.canceled -= instance.OnSwitchWeapon2;
            @SwitchWeapon3.started -= instance.OnSwitchWeapon3;
            @SwitchWeapon3.performed -= instance.OnSwitchWeapon3;
            @SwitchWeapon3.canceled -= instance.OnSwitchWeapon3;
            @SwitchWeapon4.started -= instance.OnSwitchWeapon4;
            @SwitchWeapon4.performed -= instance.OnSwitchWeapon4;
            @SwitchWeapon4.canceled -= instance.OnSwitchWeapon4;
            @SwitchWeapon5.started -= instance.OnSwitchWeapon5;
            @SwitchWeapon5.performed -= instance.OnSwitchWeapon5;
            @SwitchWeapon5.canceled -= instance.OnSwitchWeapon5;
        }

        public void RemoveCallbacks(IWeaponsswitchActions instance)
        {
            if (m_Wrapper.m_WeaponsswitchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWeaponsswitchActions instance)
        {
            foreach (var item in m_Wrapper.m_WeaponsswitchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WeaponsswitchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WeaponsswitchActions @weaponsswitch => new WeaponsswitchActions(this);
=======
    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_Point;
    public struct UIActions
    {
        private @PlayerInputActoions m_Wrapper;
        public UIActions(@PlayerInputActoions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputAction @Point => m_Wrapper.m_UI_Point;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
>>>>>>> cb621d4d0e30cd7185c500a68bae285d831f5fd2
    public interface IGameplayActions
    {
        void OnLook(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
<<<<<<< HEAD
    public interface IWeaponsswitchActions
    {
        void OnSwitchWeapon1(InputAction.CallbackContext context);
        void OnSwitchWeapon2(InputAction.CallbackContext context);
        void OnSwitchWeapon3(InputAction.CallbackContext context);
        void OnSwitchWeapon4(InputAction.CallbackContext context);
        void OnSwitchWeapon5(InputAction.CallbackContext context);
=======
    public interface IUIActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
>>>>>>> cb621d4d0e30cd7185c500a68bae285d831f5fd2
    }
}
